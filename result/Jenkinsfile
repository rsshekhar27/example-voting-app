pipeline{
  agent none

//  tools{
//    nodejs 'NodeJS 8.9.0'
//  }

  stages{
    agent {
      docker{
         image 'node:8.16.0-alpine'
      }
    }
    stage('build'){
      when{
        changeset  "**/result/**"
      }
      steps{
          echo 'Compiling Result App'
          dir('result'){
              sh 'npm install'
          }

      }
    }

    stage('test'){
      agent {
        docker{
           image 'node:8.16.0-alpine'
        }
      }
        when{
            changeset "**/result/**"
        }
        steps{
            echo "Running Unit Test on result app"
            dir('result'){
                sh 'npm install'
                sh 'npm test'
            }
        }

    }
    stage("docker-package"){
      agent any

      when{
            changeset "**/result/**"
            branch 'master'
      }

      steps{

        echo 'Packaging result app with docker'
        script{
            docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin'){
            def resultImage = docker.build("rsshekhar/result:v${env.BUILD_ID}", "./result")
                resultImage.push()
                resultImage.push("${env.BRANCH_NAME}")
                resultImage.push("latest")
            }
        }
      }
    }
  }
  post{
    always{

      echo 'Multibranch pipeline for result is completed..'
    }

    failure{
        slackSend (channel: "instavote-cd", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }

    success{
        slackSend (channel: "instavote-cd", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
  }
}
