pipeline{
  agent none

  stages{
    agent {
      docker{
         image 'python:2.7.16-slim'
         args '--user root'
      }
    }

    stage('build'){
      when{
        changeset  "**/vote/**"
      }
      steps{
          echo 'Compiling Result App'
          dir('vote'){
              sh 'pip install -r requirements.txt'
          }

      }
    }

    stage('test'){
      agent {
        docker{
           image 'python:2.7.16-slim'
           args '--user root'
        }
      }

        when{
            changeset "**/vote/**"
        }
        steps{
            echo "Running Unit Test on result app"
            dir('vote'){
                sh 'nosetests -v'
            }
        }
    }
    stage("docker-package"){
      agent any

      when{
            changeset "**/vote/**"
            branch 'master'
      }

      steps{

        echo 'Packaging vote app with docker'
        script{
            docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin'){
            def voteImage = docker.build("rsshekhar/vote:v${env.BUILD_ID}", "./vote")
                voteImage.push()
                voteImage.push("${env.BRANCH_NAME}")
                voteImage.push("latest")
            }
        }
      }
    }
  }

  post{
    always{

      echo 'Multibranch pipeline for Vote is completed..'
    }

    failure{
        slackSend (channel: "instavote-cd", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }

    success{
        slackSend (channel: "instavote-cd", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
  }
}
